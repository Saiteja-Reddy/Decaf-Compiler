; ModuleID = 'Decaf compiler'
source_filename = "Decaf compiler"

@hello = global i1 false
@a = global i32 0
@0 = private unnamed_addr constant [21 x i8] c"\22%d %d-- Hererere\5Cn\22\00"
@1 = private unnamed_addr constant [22 x i8] c"\22negative Hererere\5Cn\22\00"

define void @main() {
entry:
  %i = alloca i32
  %b = alloca i32
  store i32 0, i32* %b
  %0 = load i32, i32* %b
  store i32 122, i32* %b
  %1 = load i32, i32* @a
  store i32 -991, i32* @a
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i1 = phi i32 [ 0, %entry ], [ %NextVal, %loop ]
  %2 = load i32, i32* @a
  %addtmp = add i32 %2, 1000
  %3 = load i32, i32* @a
  store i32 %addtmp, i32* @a
  %i2 = load i32, i32* %i
  %NextVal = add i32 %i2, 1
  store i32 %NextVal, i32* %i
  %loopcondition = icmp slt i32 %NextVal, 2
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %4 = load i32, i32* @a
  %gtcomparetmp = icmp sgt i32 %4, 1
  br i1 %gtcomparetmp, label %if, label %else

if:                                               ; preds = %afterloop
  %5 = load i32, i32* %b
  %6 = load i32, i32* @a
  %7 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @0, i32 0, i32 0), i32 %5, i32 %6)
  br label %ifcont

else:                                             ; preds = %afterloop
  %8 = load i32, i32* %b
  %9 = load i32, i32* @a
  %10 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @1, i32 0, i32 0), i32 %8, i32 %9)
  br label %ifcont

ifcont:                                           ; preds = %else, %if
  ret void
}

declare i32 @printf(i8*, i32, i32)
