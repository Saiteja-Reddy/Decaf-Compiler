; ModuleID = 'Decaf compiler'
source_filename = "Decaf compiler"

@a = global [10 x i32] zeroinitializer
@0 = private unnamed_addr constant [12 x i8] c"%d printed\0A\00"

define void @main() {
entry:
  %i = alloca i32
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i1 = phi i32 [ 0, %entry ], [ %NextVal, %loop ]
  %0 = load i32, i32* %i
  %1 = load i32, i32* %i
  %a_Index = getelementptr [10 x i32], [10 x i32]* @a, i32 0, i32 %1
  %2 = load i32, i32* %a_Index
  store i32 %0, i32* %a_Index
  %i2 = load i32, i32* %i
  %NextVal = add i32 %i2, 1
  store i32 %NextVal, i32* %i
  %loopcondition = icmp slt i32 %NextVal, 10
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %3 = load i32, i32* getelementptr inbounds ([10 x i32], [10 x i32]* @a, i32 0, i32 4)
  %4 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0), i32 %3)
  ret void
}

declare i32 @printf(i8*, i32)
