; ModuleID = 'Decaf compiler'
source_filename = "Decaf compiler"

@a = global i32 0
@0 = private unnamed_addr constant [13 x i8] c"\22Done - %d \22\00"

define void @main() {
entry:
  %i = alloca i32
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %ifcont, %else, %entry
  %i1 = phi i32 [ 0, %entry ], [ %NextVal4, %ifcont ]
  %0 = load i32, i32* %i
  %equalcomparetmp = icmp eq i32 %0, 1
  br i1 %equalcomparetmp, label %if, label %else

afterloop:                                        ; preds = %ifcont, %else, %if
  %1 = load i32, i32* @a
  %2 = call i32 @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @0, i32 0, i32 0), i32 %1)
  ret void

if:                                               ; preds = %loop
  br label %afterloop

else:                                             ; preds = %loop
  %i2 = load i32, i32* %i
  %NextVal = add i32 %i2, 1
  store i32 %NextVal, i32* %i
  %loopcondition = icmp ule i32 %NextVal, 4
  br i1 %loopcondition, label %loop, label %afterloop

ifcont:                                           ; No predecessors!
  %3 = load i32, i32* @a
  %addtmp = add i32 %3, 1
  %4 = load i32, i32* @a
  store i32 %addtmp, i32* @a
  %i3 = load i32, i32* %i
  %NextVal4 = add i32 %i3, 1
  store i32 %NextVal4, i32* %i
  %loopcondition5 = icmp slt i32 %NextVal4, 4
  br i1 %loopcondition5, label %loop, label %afterloop
}

declare i32 @printf(i8*, i32)
