; ModuleID = 'Decaf compiler'
source_filename = "Decaf compiler"

@0 = private unnamed_addr constant [10 x i8] c"there %d\0A\00"

define void @ab(i1 %c) {
entry:
  %b = alloca i32
  %c1 = alloca i1
  store i1 %c, i1* %c1
  store i32 0, i32* %b
  %0 = load i32, i32* %b
  store i32 1, i32* %b
  %1 = load i32, i32* %b
  %equalcomparetmp = icmp eq i32 %1, 1
  %2 = load i1, i1* %c1
  %equalcomparetmp2 = icmp eq i1 %2, true
  %3 = and i1 %equalcomparetmp, %equalcomparetmp2
  br i1 %3, label %if, label %ifcont

if:                                               ; preds = %entry
  %4 = call i32 @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @0, i32 0, i32 0), i32 121)
  br label %ifcont

ifcont:                                           ; preds = %if, %entry
  ret void
}

declare i32 @printf(i8*, i32)

define void @main() {
entry:
  %result = alloca i32
  store i32 0, i32* %result
  %0 = load i32, i32* %result
  %addEqualToTmp = add i32 %0, 12
  store i32 %addEqualToTmp, i32* %result
  call void @ab(i1 true)
  ret void
}
